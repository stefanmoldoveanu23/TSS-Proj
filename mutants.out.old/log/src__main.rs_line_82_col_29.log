
*** src/main.rs:82:29: replace && with || in <impl PartialEq for Point>::eq

*** mutation diff:
--- src/main.rs
+++ replace && with || in <impl PartialEq for Point>::eq
@@ -74,17 +74,17 @@
 #[derive(Default, Clone)]
 struct Point {
     x: f32,
     y: f32,
 }
 
 impl PartialEq for Point {
     fn eq(&self, other: &Self) -> bool {
-        (self.x == other.x) && (self.y == other.y)
+        (self.x == other.x) || /* ~ changed by cargo-mutants ~ */ (self.y == other.y)
     }
 }
 
 impl Eq for Point {}
 
 impl Display for Point
 {
     fn fmt(&self, f: &mut Formatter<'_>) -> std::fmt::Result {


*** \\\\?\\C:\\Users\\stefa\\.rustup\\toolchains\\stable-x86_64-pc-windows-msvc\\bin\\cargo.exe build --tests --manifest-path C:\\Users\\stefa\\AppData\\Local\\Temp\\cargo-mutants-TSS-Proj-vtQfAN.tmp\\Cargo.toml
   Compiling TSS-Proj v0.1.0 (C:\Users\stefa\AppData\Local\Temp\cargo-mutants-TSS-Proj-vtQfAN.tmp)
    Finished dev [unoptimized + debuginfo] target(s) in 0.66s

*** result: Success

*** \\\\?\\C:\\Users\\stefa\\.rustup\\toolchains\\stable-x86_64-pc-windows-msvc\\bin\\cargo.exe test --manifest-path C:\\Users\\stefa\\AppData\\Local\\Temp\\cargo-mutants-TSS-Proj-vtQfAN.tmp\\Cargo.toml
    Finished test [unoptimized + debuginfo] target(s) in 0.01s
     Running unittests src\main.rs (target\debug\deps\TSS_Proj-f24ad46a4df4cb1a.exe)

running 1 test
test mutants::tests::tests::test_1 ... ok

test result: ok. 1 passed; 0 failed; 0 ignored; 0 measured; 0 filtered out; finished in 0.00s


*** result: Success
